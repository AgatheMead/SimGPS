"""
Numerically-controlled oscillator (NCO)
"""

import numpy as np
import matplotlib.pyplot as plt
from utils import sys_


class NCO:
    """
    NCO class, contains lookup table (LUT) for sine/cosine
    """

    bits, length, resolution = None, None, None
    len_lut, lut_sine, lut_cosine = None, None, None

    def __init__(self, fs=sys_.fs, bits=32, len_lut=2 ** 8):
        self.bits = bits
        self.length = 2 ** self.bits
        self.resolution = fs / self.length
        self.len_lut = len_lut      # number of quantization levels of sine/cosine, 8 bits
        self.create_lut()

    def generate(self, step, n, phase_in, index_in, len_table):
        '''

        :param step:        frequency control word
        :param n:           number of points to be generated
        :param phase_in:    current nco phase
        :param index_in:    current lookup table index
        :param len_table:   lookup table length
        :return:
            table_indices:  lut indices for each data point, size n
            phase_out:      nco phase output (= previous phase_in)
            index_out:      lookup table index output (= previous index_in)
        '''

        table_indices = [0] * n     # initialize table_indices output
        for i in range(n):
            phase_in = phase_in + step      # step once

            # phase overflow
            if phase_in >= self.length:
                index_in += phase_in // self.length
                phase_in = phase_in % self.length

            # index overflow
            if index_in >= len_table:
                index_in = index_in % len_table

            table_indices[i] = int(index_in)

        return table_indices, phase_in, index_in

    def create_lut(self):
        t = np.arange(0, 2 * np.pi, 2 * np.pi / self.len_lut)
        self.lut_sine = np.sin(t)
        self.lut_cosine = np.cos(t)


if __name__ == '__main__':

    # generate a sinusoid signal using nco
    f_sine = 2e3        # frequency 2 kHz
    duration = 1e-3     # duration 1 ms, thus two periods

    nco = NCO()
    nco_step = f_sine / nco.resolution * nco.len_lut

    t = np.arange(0, duration, 1 / sys_.fs)
    indices, _, _ = nco.generate(nco_step, len(t), 0, 0, nco.len_lut)
    signal = nco.lut_sine[indices]
    plt.plot(t, signal)
    plt.xlabel('Time (s)')
    plt.ylabel('Amplitude')
    plt.title('Sinusoidal Wave Generated by NCO')
    plt.show()














